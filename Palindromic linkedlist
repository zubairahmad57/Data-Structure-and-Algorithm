 // Approach-4 (Using Pure Recursion - Because when recursion winds back, we can start comparing curr head with last node and so on)
// T.C : O(n)
// S.C : O(1) Auxiliary space
class Solution {
    ListNode curr;

    public boolean solve(ListNode head) {
        if(head == null)
            return true;

        if(!solve(head.next) || head.val != curr.val) {
            return false;
        }

        curr = curr.next;
        return true;
    }

    public boolean isPalindrome(ListNode head) {
        curr = head;

        return solve(head);
    }
}
