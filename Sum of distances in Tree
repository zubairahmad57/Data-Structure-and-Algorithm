 import java.util.*;

class Solution {
    // Store count of subtrees of each node
    long result_base_node = 0;
    int[] count;
    int N;
    
    public int dfsBase(Map<Integer, List<Integer>> adj, int curr_node, int prev_node, int curr_depth) {
        int total_node = 1;
        
        result_base_node += curr_depth;
        
        // Check if the adjacency map contains an entry for the current node
        if (!adj.containsKey(curr_node)) {
            return 1;
        }
        
        for(int child : adj.get(curr_node)) {
            if(child == prev_node)
                continue;
            
            total_node += dfsBase(adj, child, curr_node, curr_depth+1);
        }
        
        // Store count of subtrees of each node
        count[curr_node] = total_node;
        
        return total_node;
    }
    
    public void DFS(Map<Integer, List<Integer>> adj, int parent_node, int prev_node, int[] result) {
        // Check if the adjacency map contains an entry for the parent node
        if (!adj.containsKey(parent_node)) {
            return;
        }
        
        for(int child : adj.get(parent_node)) {
            if(child == prev_node)
                continue;
            
            result[child] = result[parent_node] - count[child] + (N - count[child]);
            DFS(adj, child, parent_node, result);
        }
    }
    
    public int[] sumOfDistancesInTree(int n, int[][] edges) {
        Map<Integer, List<Integer>> adj = new HashMap<>();
        N = n;
        count = new int[n];
        
        for(int[] vec : edges) {
            int u = vec[0];
            int v = vec[1];
            
            adj.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
        }
        
        result_base_node = 0;
        dfsBase(adj, 0, -1, 0);
        
        int[] result = new int[n];
        result[0] = (int)result_base_node;
        DFS(adj, 0, -1, result);
        
        return result;
    }
}
