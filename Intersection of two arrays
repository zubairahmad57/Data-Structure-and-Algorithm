//Approach-1 (Sorting and binary search)
//T.C : O(n + mlogm)
//S.C : O(n)
public class Solution {

    public boolean binarySearch(List<Integer> nums, int target) {
        int l = 0, r = nums.size() - 1;

        while (l <= r) {
            int mid = l + (r - l) / 2;

            if (nums.get(mid) == target) {
                return true;
            } else if (nums.get(mid) < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }

        return false;
    }

    public int[] intersection(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        List<Integer> nums1List = new ArrayList<>();
        for (int num : nums1) {
            nums1List.add(num);
        }

        Set<Integer> set = new HashSet<>();

        for (int num : nums2) {
            if (binarySearch(nums1List, num)) {
                set.add(num);
            }
        }

        int[] result = new int[set.size()];
        int index = 0;
        for (int num : set) {
            result[index++] = num;
        }

        return result;
    }
}
